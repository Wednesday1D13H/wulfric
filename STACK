#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define MAX_SIZE 100

typedef struct {
    char items[MAX_SIZE];
    int top;
} Stack;

void push(Stack *stack, char item) {
    if (stack->top == MAX_SIZE - 1) {
        printf("Stack overflow\n");
        exit(EXIT_FAILURE);
    }
    stack->items[++stack->top] = item;
}

char pop(Stack *stack) {
    if (stack->top == -1) {
        printf("Stack underflow\n");
        exit(EXIT_FAILURE);
    }
    return stack->items[stack->top--];
}

char peek(Stack *stack) {
    return stack->items[stack->top];
}

int is_empty(Stack *stack) {
    return stack->top == -1;
}

int precedence(char op) {
    switch(op) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
        case '%':
            return 2;
        case '^':
            return 3;
        default:
            return 0;
    }
}

void infix_to_postfix(char infix[], char postfix[]) {
    Stack stack;
    stack.top = -1;
    int i = 0, j = 0;
    while (infix[i] != '\0') {
        if (isalnum(infix[i])) {
            postfix[j++] = infix[i++];
        }
        else if (infix[i] == '(') {
            push(&stack, infix[i++]);
        }
        else if (infix[i] == ')') {
            while (!is_empty(&stack) && peek(&stack) != '(') {
                postfix[j++] = pop(&stack);
            }
            if (!is_empty(&stack) && peek(&stack) != '(') {
                printf("Invalid expression\n");
                exit(EXIT_FAILURE);
            }
            else {
                pop(&stack); // Discard '('
                i++;
            }
        }
        else {
            while (!is_empty(&stack) && precedence(infix[i]) <= precedence(peek(&stack))) {
                postfix[j++] = pop(&stack);
            }
            push(&stack, infix[i++]);
        }
    }
    while (!is_empty(&stack)) {
        postfix[j++] = pop(&stack);
    }
    postfix[j] = '\0';
}

void infix_to_prefix(char infix[], char prefix[]) {
    int len = strlen(infix);
    char reversed_infix[len + 1];
    strcpy(reversed_infix, infix);
    strrev(reversed_infix);
    
    for (int i = 0; i < len; i++) {
        if (reversed_infix[i] == '(') {
            reversed_infix[i] = ')';
            i++;
        }
        else if (reversed_infix[i] == ')') {
            reversed_infix[i] = '(';
            i++;
        }
    }
    char postfix[len + 1];
    infix_to_postfix(reversed_infix, postfix);
    strrev(postfix);
    strcpy(prefix, postfix);
}

int evaluate_postfix(char postfix[]) {
    Stack stack;
    stack.top = -1;
    int i = 0, operand1, operand2, result;
    while (postfix[i] != '\0') {
        if (isdigit(postfix[i])) {
            push(&stack, postfix[i++] - '0');
        }
        else {
            operand2 = pop(&stack);
            operand1 = pop(&stack);
            switch(postfix[i++]) {
                case '+':
                    result = operand1 + operand2;
                    break;
                case '-':
                    result = operand1 - operand2;
                    break;
                case '*':
                    result = operand1 * operand2;
                    break;
                case '/':
                    result = operand1 / operand2;
                    break;
                case '^':
                    result = 1;
                    for (int i = 0; i < operand2; i++) {
                        result *= operand1;
                    }
                    break;
                case '%':
                    result = operand1 % operand2;
                    break;
            }
            push(&stack, result);
        }
    }
    return pop(&stack);
}

int main() {
    char infix[MAX_SIZE], postfix[MAX_SIZE], prefix[MAX_SIZE];
    int choice, result;

    printf("Enter an infix expression: ");
    scanf("%s", infix);

    printf("\nMenu:\n");
    printf("1. Convert to postfix and evaluate\n");
    printf("2. Convert to prefix and evaluate\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    switch(choice) {
        case 1:
            infix_to_postfix(infix, postfix);
            printf("Postfix expression: %s\n", postfix);
            result = evaluate_postfix(postfix);
            printf("Result: %d\n", result);
            break;
        case 2:
            infix_to_prefix(infix, prefix);
            printf("Prefix expression: %s\n", prefix);
            result = evaluate_postfix(prefix);
            printf("Result: %d\n", result);
            break;
        default:
            printf("Invalid choice\n");
    }

    return 0;
}
