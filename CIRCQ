#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 5

// Structure to represent the circular queue
typedef struct {
    int items[MAX_SIZE];
    int front, rear;
} CircularQueue;

// Function prototypes
void initQueue(CircularQueue *queue);
int isFull(CircularQueue *queue);
int isEmpty(CircularQueue *queue);
void enqueue(CircularQueue *queue, int value);
int dequeue(CircularQueue *queue);
void display(CircularQueue *queue);

int main() {
    CircularQueue queue;
    int choice, value;

    initQueue(&queue);

    while (1) {
        printf("\nCircular Queue Operations:\n");
        printf("1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Display\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                if (isFull(&queue))
                    printf("Queue is full!\n");
                else {
                    printf("Enter value to enqueue: ");
                    scanf("%d", &value);
                    enqueue(&queue, value);
                }
                break;
            case 2:
                if (isEmpty(&queue))
                    printf("Queue is empty!\n");
                else
                    printf("Dequeued value: %d\n", dequeue(&queue));
                break;
            case 3:
                display(&queue);
                break;
            case 4:
                printf("Exiting program...\n");
                exit(0);
            default:
                printf("Invalid choice! Please enter a valid option.\n");
        }
    }

    return 0;
}

// Initialize the circular queue
void initQueue(CircularQueue *queue) {
    queue->front = -1;
    queue->rear = -1;
}

// Check if the circular queue is full
int isFull(CircularQueue *queue) {
    return ((queue->rear + 1) % MAX_SIZE == queue->front);
}

// Check if the circular queue is empty
int isEmpty(CircularQueue *queue) {
    return (queue->front == -1);
}

// Enqueue an element into the circular queue
void enqueue(CircularQueue *queue, int value) {
    if (isEmpty(queue)) {
        queue->front = 0;
        queue->rear = 0;
    } else {
        queue->rear = (queue->rear + 1) % MAX_SIZE;
    }
    queue->items[queue->rear] = value;
    printf("Enqueued %d\n", value);
}

// Dequeue an element from the circular queue
int dequeue(CircularQueue *queue) {
    int dequeued = queue->items[queue->front];
    if (queue->front == queue->rear) {
        // Last element in the queue
        queue->front = -1;
        queue->rear = -1;
    } else {
        queue->front = (queue->front + 1) % MAX_SIZE;
    }
    return dequeued;
}

// Display the elements of the circular queue
void display(CircularQueue *queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty!\n");
        return;
    }
    printf("Elements in the queue: ");
    int i = queue->front;
    while (i != queue->rear) {
        printf("%d ", queue->items[i]);
        i = (i + 1) % MAX_SIZE;
    }
    printf("%d\n", queue->items[i]);
}
