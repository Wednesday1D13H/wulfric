#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

// Structure to represent a deque node
struct DequeNode {
    int data;
    struct DequeNode *prev;
    struct DequeNode *next;
};

// Structure to represent a deque
struct Deque {
    struct DequeNode *front, *rear;
};

// Function to create a new deque node
struct DequeNode *createNode(int data) {
    struct DequeNode *newNode = (struct DequeNode *)malloc(sizeof(struct DequeNode));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->data = data;
    newNode->prev = newNode->next = NULL;
    return newNode;
}

// Function to initialize a deque
void initDeque(struct Deque *deque) {
    deque->front = deque->rear = NULL;
}

// Function to check if deque is empty
int isEmpty(struct Deque *deque) {
    return (deque->front == NULL);
}

// Function to insert element at the front of the deque
void insertFront(struct Deque *deque, int data) {
    struct DequeNode *newNode = createNode(data);
    if (isEmpty(deque)) {
        deque->front = deque->rear = newNode;
    } else {
        newNode->next = deque->front;
        deque->front->prev = newNode;
        deque->front = newNode;
    }
    printf("%d inserted at the front\n", data);
}

// Function to insert element at the rear of the deque
void insertRear(struct Deque *deque, int data) {
    struct DequeNode *newNode = createNode(data);
    if (isEmpty(deque)) {
        deque->front = deque->rear = newNode;
    } else {
        newNode->prev = deque->rear;
        deque->rear->next = newNode;
        deque->rear = newNode;
    }
    printf("%d inserted at the rear\n", data);
}

// Function to delete element from the front of the deque
void deleteFront(struct Deque *deque) {
    if (isEmpty(deque)) {
        printf("Deque is empty, cannot delete from front\n");
        return;
    }
    struct DequeNode *temp = deque->front;
    int data = temp->data;
    if (deque->front == deque->rear) {
        deque->front = deque->rear = NULL;
    } else {
        deque->front = deque->front->next;
        deque->front->prev = NULL;
    }
    free(temp);
    printf("%d deleted from the front\n", data);
}

// Function to delete element from the rear of the deque
void deleteRear(struct Deque *deque) {
    if (isEmpty(deque)) {
        printf("Deque is empty, cannot delete from rear\n");
        return;
    }
    struct DequeNode *temp = deque->rear;
    int data = temp->data;
    if (deque->front == deque->rear) {
        deque->front = deque->rear = NULL;
    } else {
        deque->rear = deque->rear->prev;
        deque->rear->next = NULL;
    }
    free(temp);
    printf("%d deleted from the rear\n", data);
}

// Function to display the elements of the deque
void display(struct Deque *deque) {
    if (isEmpty(deque)) {
        printf("Deque is empty\n");
        return;
    }
    printf("Deque elements: ");
    struct DequeNode *current = deque->front;
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

int main() {
    struct Deque deque;
    initDeque(&deque);
    int choice, data;

    do {
        printf("\n--- Deque Menu ---\n");
        printf("1. Insert element at front\n");
        printf("2. Insert element at rear\n");
        printf("3. Delete element from front\n");
        printf("4. Delete element from rear\n");
        printf("5. Display elements\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter element to insert at front: ");
                scanf("%d", &data);
                insertFront(&deque, data);
                break;
            case 2:
                printf("Enter element to insert at rear: ");
                scanf("%d", &data);
                insertRear(&deque, data);
                break;
            case 3:
                deleteFront(&deque);
                break;
            case 4:
                deleteRear(&deque);
                break;
            case 5:
                display(&deque);
                break;
            case 6:
                printf("Exiting program...\n");
                break;
            default:
                printf("Invalid choice! Please enter a number between 1 to 6.\n");
        }
    } while (choice != 6);

    return 0;
}
